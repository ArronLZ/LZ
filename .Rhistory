file.remove("NAMESPACE")
unlink("man", recursive = T)
devtools::load_all()
devtools::document() # usethis::use_package("stats", type = "Depends")
devtools::check() # 每次改动后最好都check一下
# devtools::clean_vignettes()
# devtools::build_vignettes()
# .\Rcmd.exe build --resave-data D:\IMPORTANT\LZ
devtools::build()
devtools::install_github("ArronLZ/LZ", upgrade = "never", build_vignettes = F,
force = T)
devtools::install_github("ArronLZ/LZ", upgrade = "never", build_vignettes = F,
force = T)
# 总结(极简: document() + build)
# 1. devtools::load_all()
# 2. 1. devtools::document()
#    2. vim DESCRIPTION(usethis::函数或手动)
# 3. devtools::check() / devtools::build()
# LDCB流程
file.remove("NAMESPACE")
unlink("man", recursive = T)
devtools::load_all()
devtools::document() # usethis::use_package("stats", type = "Depends")
devtools::check() # 每次改动后最好都check一下
# 总结(极简: document() + build)
# 1. devtools::load_all()
# 2. 1. devtools::document()
#    2. vim DESCRIPTION(usethis::函数或手动)
# 3. devtools::check() / devtools::build()
# LDCB流程
file.remove("NAMESPACE")
unlink("man", recursive = T)
devtools::load_all()
devtools::document() # usethis::use_package("stats", type = "Depends")
# 总结(极简: document() + build)
# 1. devtools::load_all()
# 2. 1. devtools::document()
#    2. vim DESCRIPTION(usethis::函数或手动)
# 3. devtools::check() / devtools::build()
# LDCB流程
file.remove("NAMESPACE")
unlink("man", recursive = T)
devtools::load_all()
devtools::document() # usethis::use_package("stats", type = "Depends")
devtools::check() # 每次改动后最好都check一下
# 总结(极简: document() + build)
# 1. devtools::load_all()
# 2. 1. devtools::document()
#    2. vim DESCRIPTION(usethis::函数或手动)
# 3. devtools::check() / devtools::build()
# LDCB流程
file.remove("NAMESPACE")
unlink("man", recursive = T)
devtools::load_all()
devtools::document() # usethis::use_package("stats", type = "Depends")
devtools::check() # 每次改动后最好都check一下
# devtools::clean_vignettes()
# devtools::build_vignettes()
# .\Rcmd.exe build --resave-data D:\IMPORTANT\LZ
devtools::build()
metanr_packages <- function(){
metr_pkgs <- c("impute", "pcaMethods", "globaltest", "GlobalAncova", "Rgraphviz", "preprocessCore", "genefilter", "sva", "limma", "KEGGgraph", "siggenes","BiocParallel", "MSnbase", "multtest","RBGL","edgeR","fgsea","devtools","crmn","httr","qs")
list_installed <- installed.packages()
new_pkgs <- subset(metr_pkgs, !(metr_pkgs %in% list_installed[, "Package"]))
if(length(new_pkgs)!=0){
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(new_pkgs)
print(c(new_pkgs, " packages added..."))
}
if((length(new_pkgs)<1)){
print("No new packages added...")
}
}
metanr_packages()
installed.packages()
metr_pkgs <- c("impute", "pcaMethods", "globaltest", "GlobalAncova", "Rgraphviz", "preprocessCore", "genefilter", "sva", "limma", "KEGGgraph", "siggenes","BiocParallel", "MSnbase", "multtest","RBGL","edgeR","fgsea","devtools","crmn","httr","qs")
list_installed <- installed.packages()
subset(metr_pkgs, !(metr_pkgs %in% list_installed[, "Package"]))
metr_pkgs <- c("impute", "pcaMethods", "globaltest", "GlobalAncova", "Rgraphviz", "preprocessCore", "genefilter", "sva", "limma", "KEGGgraph", "siggenes","BiocParallel", "MSnbase", "multtest","RBGL","edgeR","fgsea","devtools","crmn","httr","qs")
list_installed <- installed.packages()
subset(metr_pkgs, !(metr_pkgs %in% list_installed[, "Package"]))
install.packages("pacman")
library(pacman)
pacman::p_load(c("impute", "pcaMethods", "globaltest", "GlobalAncova", "Rgraphviz", "preprocessCore", "genefilter", "sva", "limma", "KEGGgraph", "siggenes","BiocParallel", "MSnbase", "multtest","RBGL","edgeR","fgsea","httr","qs"))
pacman::p_load(c("impute", "pcaMethods", "globaltest", "GlobalAncova",
"Rgraphviz", "preprocessCore", "genefilter", "sva",
"limma", "KEGGgraph", "siggenes","BiocParallel",
"MSnbase", "multtest","RBGL","edgeR","fgsea","httr","qs"))
cran_pack <- c("impute", "pcaMethods", "globaltest", "GlobalAncova",
"Rgraphviz", "preprocessCore", "genefilter", "sva",
"limma", "KEGGgraph", "siggenes","BiocParallel",
"MSnbase", "multtest","RBGL","edgeR","fgsea","httr","qs")
for (p in cran_pack) {
install.packages(p)
}
devtools::install_github("ArronLZ/YZ", upgrade = "never", build_vignettes = F,
force = T)
# 总结(极简: document() + build)
# 1. devtools::load_all()
# 2. 1. devtools::document()
#    2. vim DESCRIPTION(usethis::函数或手动)
# 3. devtools::check() / devtools::build()
# LDCB流程
file.remove("NAMESPACE")
unlink("man", recursive = T)
devtools::load_all()
devtools::document() # usethis::use_package("stats", type = "Depends")
devtools::check() # 每次改动后最好都check一下
# 总结(极简: document() + build)
# 1. devtools::load_all()
# 2. 1. devtools::document()
#    2. vim DESCRIPTION(usethis::函数或手动)
# 3. devtools::check() / devtools::build()
# LDCB流程
file.remove("NAMESPACE")
unlink("man", recursive = T)
devtools::load_all()
devtools::document() # usethis::use_package("stats", type = "Depends")
devtools::check() # 每次改动后最好都check一下
# 总结(极简: document() + build)
# 1. devtools::load_all()
# 2. 1. devtools::document()
#    2. vim DESCRIPTION(usethis::函数或手动)
# 3. devtools::check() / devtools::build()
# LDCB流程
file.remove("NAMESPACE")
unlink("man", recursive = T)
devtools::load_all()
devtools::document() # usethis::use_package("stats", type = "Depends")
devtools::check() # 每次改动后最好都check一下
# devtools::clean_vignettes()
# devtools::build_vignettes()
# .\Rcmd.exe build --resave-data D:\IMPORTANT\LZ
devtools::build()
devtools::install_github("ArronLZ/YZ", upgrade = "never", build_vignettes = F,
force = T)
# 总结(极简: document() + build)
# 1. devtools::load_all()
# 2. 1. devtools::document()
#    2. vim DESCRIPTION(usethis::函数或手动)
# 3. devtools::check() / devtools::build()
# LDCB流程
file.remove("NAMESPACE")
unlink("man", recursive = T)
devtools::load_all()
devtools::document() # usethis::use_package("stats", type = "Depends")
devtools::check() # 每次改动后最好都check一下
devtools::install_github("ArronLZ/LZ", upgrade = "never", build_vignettes = F,
force = T)
# 总结(极简: document() + build)
# 1. devtools::load_all()
# 2. 1. devtools::document()
#    2. vim DESCRIPTION(usethis::函数或手动)
# 3. devtools::check() / devtools::build()
# LDCB流程
file.remove("NAMESPACE")
unlink("man", recursive = T)
devtools::load_all()
devtools::document() # usethis::use_package("stats", type = "Depends")
devtools::check() # 每次改动后最好都check一下
# devtools::clean_vignettes()
# devtools::build_vignettes()
# .\Rcmd.exe build --resave-data D:\IMPORTANT\LZ
devtools::build()
devtools::install_github("ArronLZ/LZ", upgrade = "never", build_vignettes = F,
force = T)
devtools::install_github("ArronLZ/YZ", upgrade = "never", build_vignettes = F,
force = T)
# 总结(极简: document() + build)
# 1. devtools::load_all()
# 2. 1. devtools::document()
#    2. vim DESCRIPTION(usethis::函数或手动)
# 3. devtools::check() / devtools::build()
# LDCB流程
file.remove("NAMESPACE")
unlink("man", recursive = T)
devtools::load_all()
devtools::document() # usethis::use_package("stats", type = "Depends")
devtools::check() # 每次改动后最好都check一下
# 总结(极简: document() + build)
# 1. devtools::load_all()
# 2. 1. devtools::document()
#    2. vim DESCRIPTION(usethis::函数或手动)
# 3. devtools::check() / devtools::build()
# LDCB流程
file.remove("NAMESPACE")
unlink("man", recursive = T)
devtools::load_all()
devtools::document() # usethis::use_package("stats", type = "Depends")
devtools::check() # 每次改动后最好都check一下
# devtools::clean_vignettes()
# devtools::build_vignettes()
# .\Rcmd.exe build --resave-data D:\IMPORTANT\LZ
devtools::build()
devtools::install_github("ArronLZ/LZ", upgrade = "never", build_vignettes = F,
force = T)
devtools::install_github("ArronLZ/LZ", upgrade = "never", build_vignettes = F,
force = T)
# 总结(极简: document() + build)
# 1. devtools::load_all()
# 2. 1. devtools::document()
#    2. vim DESCRIPTION(usethis::函数或手动)
# 3. devtools::check() / devtools::build()
# LDCB流程
file.remove("NAMESPACE")
unlink("man", recursive = T)
devtools::load_all()
devtools::document() # usethis::use_package("stats", type = "Depends")
devtools::check() # 每次改动后最好都check一下
# 总结(极简: document() + build)
# 1. devtools::load_all()
# 2. 1. devtools::document()
#    2. vim DESCRIPTION(usethis::函数或手动)
# 3. devtools::check() / devtools::build()
# LDCB流程
file.remove("NAMESPACE")
unlink("man", recursive = T)
devtools::load_all()
# 总结(极简: document() + build)
# 1. devtools::load_all()
# 2. 1. devtools::document()
#    2. vim DESCRIPTION(usethis::函数或手动)
# 3. devtools::check() / devtools::build()
# LDCB流程
file.remove("NAMESPACE")
unlink("man", recursive = T)
devtools::load_all()
devtools::document() # usethis::use_package("stats", type = "Depends")
devtools::check() # 每次改动后最好都check一下
devtools::install_github("ArronLZ/LZ", upgrade = "never", build_vignettes = F,
force = T)
# 总结(极简: document() + build)
# 1. devtools::load_all()
# 2. 1. devtools::document()
#    2. vim DESCRIPTION(usethis::函数或手动)
# 3. devtools::check() / devtools::build()
# LDCB流程
file.remove("NAMESPACE")
unlink("man", recursive = T)
devtools::load_all()
devtools::document() # usethis::use_package("stats", type = "Depends")
devtools::check() # 每次改动后最好都check一下
# 总结(极简: document() + build)
# 1. devtools::load_all()
# 2. 1. devtools::document()
#    2. vim DESCRIPTION(usethis::函数或手动)
# 3. devtools::check() / devtools::build()
# LDCB流程
file.remove("NAMESPACE")
unlink("man", recursive = T)
devtools::load_all()
devtools::document() # usethis::use_package("stats", type = "Depends")
devtools::check() # 每次改动后最好都check一下
# 总结(极简: document() + build)
# 1. devtools::load_all()
# 2. 1. devtools::document()
#    2. vim DESCRIPTION(usethis::函数或手动)
# 3. devtools::check() / devtools::build()
# LDCB流程
file.remove("NAMESPACE")
unlink("man", recursive = T)
devtools::load_all()
devtools::document() # usethis::use_package("stats", type = "Depends")
devtools::check() # 每次改动后最好都check一下
# 总结(极简: document() + build)
# 1. devtools::load_all()
# 2. 1. devtools::document()
#    2. vim DESCRIPTION(usethis::函数或手动)
# 3. devtools::check() / devtools::build()
# LDCB流程
file.remove("NAMESPACE")
unlink("man", recursive = T)
devtools::load_all()
devtools::document() # usethis::use_package("stats", type = "Depends")
devtools::check() # 每次改动后最好都check一下
# 总结(极简: document() + build)
# 1. devtools::load_all()
# 2. 1. devtools::document()
#    2. vim DESCRIPTION(usethis::函数或手动)
# 3. devtools::check() / devtools::build()
# LDCB流程
file.remove("NAMESPACE")
unlink("man", recursive = T)
devtools::load_all()
devtools::document() # usethis::use_package("stats", type = "Depends")
devtools::check() # 每次改动后最好都check一下
# devtools::clean_vignettes()
# devtools::build_vignettes()
# .\Rcmd.exe build --resave-data D:\IMPORTANT\LZ
devtools::build()
# 总结(极简: document() + build)
# 1. devtools::load_all()
# 2. 1. devtools::document()
#    2. vim DESCRIPTION(usethis::函数或手动)
# 3. devtools::check() / devtools::build()
# LDCB流程
file.remove("NAMESPACE")
unlink("man", recursive = T)
devtools::load_all()
# 总结(极简: document() + build)
# 1. devtools::load_all()
# 2. 1. devtools::document()
#    2. vim DESCRIPTION(usethis::函数或手动)
# 3. devtools::check() / devtools::build()
# LDCB流程
file.remove("NAMESPACE")
unlink("man", recursive = T)
devtools::load_all()
devtools::document() # usethis::use_package("stats", type = "Depends")
devtools::check() # 每次改动后最好都check一下
# 总结(极简: document() + build)
# 1. devtools::load_all()
# 2. 1. devtools::document()
#    2. vim DESCRIPTION(usethis::函数或手动)
# 3. devtools::check() / devtools::build()
# LDCB流程
file.remove("NAMESPACE")
unlink("man", recursive = T)
devtools::load_all()
devtools::document() # usethis::use_package("stats", type = "Depends")
devtools::check() # 每次改动后最好都check一下
# 总结(极简: document() + build)
# 1. devtools::load_all()
# 2. 1. devtools::document()
#    2. vim DESCRIPTION(usethis::函数或手动)
# 3. devtools::check() / devtools::build()
# LDCB流程
file.remove("NAMESPACE")
unlink("man", recursive = T)
devtools::load_all()
devtools::document() # usethis::use_package("stats", type = "Depends")
devtools::check() # 每次改动后最好都check一下
# devtools::clean_vignettes()
# devtools::build_vignettes()
# .\Rcmd.exe build --resave-data D:\IMPORTANT\LZ
devtools::build()
# 总结(极简: document() + build)
# 1. devtools::load_all()
# 2. 1. devtools::document()
#    2. vim DESCRIPTION(usethis::函数或手动)
# 3. devtools::check() / devtools::build()
# LDCB流程
file.remove("NAMESPACE")
unlink("man", recursive = T)
devtools::load_all()
devtools::document() # usethis::use_package("stats", type = "Depends")
devtools::check() # 每次改动后最好都check一下
# 总结(极简: document() + build)
# 1. devtools::load_all()
# 2. 1. devtools::document()
#    2. vim DESCRIPTION(usethis::函数或手动)
# 3. devtools::check() / devtools::build()
# LDCB流程
file.remove("NAMESPACE")
unlink("man", recursive = T)
devtools::load_all()
devtools::document() # usethis::use_package("stats", type = "Depends")
devtools::check() # 每次改动后最好都check一下
# 总结(极简: document() + build)
# 1. devtools::load_all()
# 2. 1. devtools::document()
#    2. vim DESCRIPTION(usethis::函数或手动)
# 3. devtools::check() / devtools::build()
# LDCB流程
file.remove("NAMESPACE")
unlink("man", recursive = T)
devtools::load_all()
devtools::document() # usethis::use_package("stats", type = "Depends")
devtools::check() # 每次改动后最好都check一下
# LDCB流程
file.remove("NAMESPACE")
unlink("man", recursive = T)
devtools::load_all()
devtools::document() # usethis::use_package("stats", type = "Depends")
devtools::check()
# 总结(极简: document() + build)
# 1. devtools::load_all()
# 2. 1. devtools::document()
#    2. vim DESCRIPTION(usethis::函数或手动)
# 3. devtools::check() / devtools::build()
# LDCB流程
file.remove("NAMESPACE")
unlink("man", recursive = T)
devtools::load_all()
devtools::document() # usethis::use_package("stats", type = "Depends")
# 总结(极简: document() + build)
# 1. devtools::load_all()
# 2. 1. devtools::document()
#    2. vim DESCRIPTION(usethis::函数或手动)
# 3. devtools::check() / devtools::build()
# LDCB流程
file.remove("NAMESPACE")
unlink("man", recursive = T)
devtools::load_all()
devtools::document() # usethis::use_package("stats", type = "Depends")
devtools::check() # 每次改动后最好都check一下
devtools::install_github("ArronLZ/LZ", upgrade = "never", build_vignettes = F,
force = T)
# 总结(极简: document() + build)
# 1. devtools::load_all()
# 2. 1. devtools::document()
#    2. vim DESCRIPTION(usethis::函数或手动)
# 3. devtools::check() / devtools::build()
# LDCB流程
file.remove("NAMESPACE")
unlink("man", recursive = T)
devtools::load_all()
devtools::document() # usethis::use_package("stats", type = "Depends")
devtools::check() # 每次改动后最好都check一下
# devtools::clean_vignettes()
# devtools::build_vignettes()
# .\Rcmd.exe build --resave-data D:\IMPORTANT\LZ
devtools::build()
devtools::install_github("ArronLZ/LZ", upgrade = "never", build_vignettes = F,
force = T)
devtools::install_github("ArronLZ/LZ", upgrade = "never", build_vignettes = F,
force = T)
devtools::install_github("ArronLZ/LZ", upgrade = "never", build_vignettes = F,
force = T)
# 总结(极简: document() + build)
# 1. devtools::load_all()
# 2. 1. devtools::document()
#    2. vim DESCRIPTION(usethis::函数或手动)
# 3. devtools::check() / devtools::build()
# LDCB流程
file.remove("NAMESPACE")
unlink("man", recursive = T)
devtools::load_all()
devtools::document() # usethis::use_package("stats", type = "Depends")
devtools::check() # 每次改动后最好都check一下
# 总结(极简: document() + build)
# 1. devtools::load_all()
# 2. 1. devtools::document()
#    2. vim DESCRIPTION(usethis::函数或手动)
# 3. devtools::check() / devtools::build()
# LDCB流程
file.remove("NAMESPACE")
unlink("man", recursive = T)
devtools::load_all()
devtools::document() # usethis::use_package("stats", type = "Depends")
devtools::check() # 每次改动后最好都check一下
file.remove("NAMESPACE")
unlink("man", recursive = T)
devtools::load_all()
devtools::document() # usethis::use_package("stats", type = "Depends")
devtools::check() # 每次改动后最
# devtools::clean_vignettes()
# devtools::build_vignettes()
# .\Rcmd.exe build --resave-data D:\IMPORTANT\LZ
devtools::build()
file.remove("NAMESPACE")
unlink("man", recursive = T)
devtools::load_all()
devtools::document() # usethis::use_package("stats", type = "Depends")
devtools::check() # 每次改动后最好
# devtools::clean_vignettes()
# devtools::build_vignettes()
# .\Rcmd.exe build --resave-data D:\IMPORTANT\LZ
devtools::build()
tibble(x =1:10, y= 2:11)
a = tibble(x =1:10, y= 2:11)
a[,"y"]
a[,"y", drop= F]
a[,"y", drop= T]
a = data.frame(x =1:10, y= 2:11)
a[,"y", drop= T]
file.remove("NAMESPACE")
unlink("man", recursive = T)
devtools::load_all()
devtools::document() # usethis::use_package("stats", type = "Depends")
devtools::check() # 每次改动后最好都check一下
# devtools::clean_vignettes()
file.remove("NAMESPACE")
unlink("man", recursive = T)
devtools::load_all()
devtools::document() # usethis::use_package("stats", type = "Depends")
devtools::check() # 每次
file.remove("NAMESPACE")
unlink("man", recursive = T)
devtools::load_all()
devtools::document() # usethis::use_package("stats", type = "Depends")
devtools::check() # 每次改动后最好都check一下
# devtools::clean_vignettes()
DEGp_GOALL_bar
# 总结(极简: document() + build)
# 1. devtools::load_all()
# 2. 1. devtools::document()
#    2. vim DESCRIPTION(usethis::函数或手动)
# 3. devtools::check() / devtools::build()
# LDCB流程
file.remove("NAMESPACE")
unlink("man", recursive = T)
devtools::load_all()
devtools::document() # usethis::use_package("stats", type = "Depends")
devtools::check() # 每次改动后最好都check一下
# 总结(极简: document() + build)
# 1. devtools::load_all()
# 2. 1. devtools::document()
#    2. vim DESCRIPTION(usethis::函数或手动)
# 3. devtools::check() / devtools::build()
# LDCB流程
file.remove("NAMESPACE")
unlink("man", recursive = T)
devtools::load_all()
devtools::document() # usethis::use_package("stats", type = "Depends")
devtools::check() # 每次改动后最好都check一下
file.remove("NAMESPACE")
unlink("man", recursive = T)
devtools::load_all()
devtools::document() # usethis::use_package("stats", type = "Depends")
devtools::check() # 每
