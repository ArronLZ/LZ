View(keggdf.symbol)
keggdf.symbol[keggdf.symbol$hsa_id == "hsa00010", ]
keggdf.symbol[keggdf.symbol$hsa_id == "hsa00010", ] %>% arrange(gene)
load("data/keggpathway.gmt.RData")
tagetgmt[tagetgmt$hsa_id == "hsa00010", ] %>% arrange(gene)
View(tagetgmt)
tagetgmt[tagetgmt$term == "Glycolysis / Gluconeogenesis", ] %>% arrange(gene)
keggdf.symbol[keggdf.symbol$hsa_id == "hsa00010", ] %>% arrange(gene) %>% group_by(term, gene) %>%
distinct(.keep_all = T)
tagetgmt[tagetgmt$term == "Glycolysis / Gluconeogenesis", ] %>% arrange(gene) %>% group_by(term, gene) %>%
distinct(.keep_all = T)
#####
library(clusterProfiler)
library(org.Hs.eg.db)
library(dplyr)
LZ::setproxy()
getKEGGdb <- function() {
link <- read.table('https://rest.kegg.jp/link/hsa/pathway')
list <- read.table('https://rest.kegg.jp/list/pathway/hsa', sep = '\t')
conv <- read.table('https://rest.kegg.jp/conv/hsa/uniprot')
#
names(link) <- c("hsa_id", "gene_hsa_id")
names(list) <- c("hsa_id", "pathway_name_full")
names(conv) <- c("UNIPROT", "gene_hsa_id")
#
link[,1] <- sapply(strsplit(link[,1], ":"), function(x) x[[2]])
link[,2] <- sapply(strsplit(link[,2], ":"), function(x) x[[2]])
conv[,1] <- sapply(strsplit(conv[,1], ":"), function(x) x[[2]])
conv[,2] <- sapply(strsplit(conv[,2], ":"), function(x) x[[2]])
list$pathway_name <- gsub(
pattern = " - Homo sapiens \\(human\\)", "", list$pathway_name_full)
keggpathway <- merge(link, list, by = "hsa_id", all.x = T)
keggpathway.n <- merge(keggpathway, conv, by = "gene_hsa_id", all.x = T)
# 加上其它id
annot.se <- bitr(keggpathway.n$UNIPROT, fromType = 'UNIPROT',
toType = c('SYMBOL','ENSEMBL'),
OrgDb = 'org.Hs.eg.db') #%>% distinct(ENTREZID, .keep_all = T)
keggdf <- merge(keggpathway.n, annot.se, by='UNIPROT')
keggdf <- keggdf[, c(3:5,2,1,6,7)]
keggdf <- keggdf %>% dplyr::arrange(hsa_id)
original_data <- list(link=link, list=list, conv=conv)
return(list(keggdf = keggdf, original_data = original_data))
}
keggdb <- getKEGGdb()
View(keggdb)
keggdf <- keggdb$keggdf
keggdf.symbol <- keggdf %>% dplyr::select(hsa_id, pathway_name, SYMBOL) %>%
rename(term = pathway_name, gene = SYMBOL) %>%
group_by(term, gene) %>%
distinct(.keep_all = T) %>%
na.omit()
keggdf.uniprot <- keggdf %>% dplyr::select(hsa_id, pathway_name, UNIPROT) %>%
rename(term = pathway_name, gene = UNIPROT) %>%
group_by(term, gene) %>%
distinct(.keep_all = T) %>%
na.omit()
keggdf.ensembl <- keggdf %>% dplyr::select(hsa_id, pathway_name, ENSEMBL) %>%
rename(term = pathway_name, gene = ENSEMBL) %>%
group_by(term, gene) %>%
distinct(.keep_all = T) %>%
na.omit()
result <- tryCatch({
x <- 10 / 0  # 产生错误的代码，除以零会导致错误
print(x)     # 这行代码不会被执行
}, error = function(e) {
# 处理错误的代码块
cat("Error occurred: ", conditionMessage(e), "\n")
}, warning = function(w) {
# 处理警告的代码块
cat("Warning occurred: ", conditionMessage(w), "\n")
}, finally = {
# 最终执行的代码块
cat("Execution completed.\n")
})
result <- tryCatch({
x <- 10 / 0  # 产生错误的代码，除以零会导致错误
print(x)     # 这行代码不会被执行
}, error = function(e) {
# 处理错误的代码块
cat("Error occurred: ", conditionMessage(e), "\n")
}, warning = function(w) {
# 处理警告的代码块
cat("Warning occurred: ", conditionMessage(w), "\n")
}, finally = {
# 最终执行的代码块
cat("Execution completed 111 .\n")
})
result <- tryCatch({
x <- 10 / 0  # 产生错误的代码，除以零会导致错误
print(x)     # 这行代码不会被执行
}, error = function(e) {
# 处理错误的代码块
cat("Error occurred: ", conditionMessage(e), "\n")
}, warning = function(w) {
# 处理警告的代码块
cat("Warning occurred: ", conditionMessage(w), "\n")
})
result <- tryCatch({
x <- 10 / 1  # 产生错误的代码，除以零会导致错误
print(x)     # 这行代码不会被执行
}, error = function(e) {
# 处理错误的代码块
cat("Error occurred: ", conditionMessage(e), "\n")
}, warning = function(w) {
# 处理警告的代码块
cat("Warning occurred: ", conditionMessage(w), "\n")
})
tryCatch({
x <- 10 / 1  # 产生错误的代码，除以零会导致错误
print(x)     # 这行代码不会被执行
}, error = function(e) {
# 处理错误的代码块
cat("Error occurred: ", conditionMessage(e), "\n")
}, warning = function(w) {
# 处理警告的代码块
cat("Warning occurred: ", conditionMessage(w), "\n")
})
tryCatch({
x <- 10 / 1  # 产生错误的代码，除以零会导致错误
print(x)     # 这行代码不会被执行
}, error = function(e) {
# 处理错误的代码块
cat("Error occurred: ", conditionMessage(e), "\n")
}, warning = function(w) {
# 处理警告的代码块
cat("Warning occurred: ", conditionMessage(w), "\n")
}, finally = {
# 最终执行的代码块
cat("Execution completed 111 .\n")
})
LZ::setproxy()
LZ::setproxy()
getKEGGdb <- function() {
# aqurie data from online
tryCatch({
link <- read.table('https://rest.kegg.jp/link/hsa/pathway')
list <- read.table('https://rest.kegg.jp/list/pathway/hsa', sep = '\t')
conv <- read.table('https://rest.kegg.jp/conv/hsa/uniprot')
}, error = function(e) {
cat("网络不佳，请调整您的网络或使用代理工具\n")
cat("Error occurred: ", conditionMessage(e), "\n")
}, warning = function(w) {
cat("网络不佳，请调整您的网络或使用代理工具\n")
cat("Warning occurred: ", conditionMessage(w), "\n")
}, finally = {})
# data clean 1: original -----------
names(link) <- c("hsa_id", "gene_hsa_id")
names(list) <- c("hsa_id", "pathway_name_full")
names(conv) <- c("UNIPROT", "gene_hsa_id")
#
link[,1] <- sapply(strsplit(link[,1], ":"), function(x) x[[2]])
link[,2] <- sapply(strsplit(link[,2], ":"), function(x) x[[2]])
conv[,1] <- sapply(strsplit(conv[,1], ":"), function(x) x[[2]])
conv[,2] <- sapply(strsplit(conv[,2], ":"), function(x) x[[2]])
list$pathway_name <- gsub(
pattern = " - Homo sapiens \\(human\\)", "", list$pathway_name_full)
keggpathway <- merge(link, list, by = "hsa_id", all.x = T)
keggpathway.n <- merge(keggpathway, conv, by = "gene_hsa_id", all.x = T)
# 加上其它id
annot.se <- bitr(keggpathway.n$UNIPROT, fromType = 'UNIPROT',
toType = c('SYMBOL','ENSEMBL'),
OrgDb = 'org.Hs.eg.db') #%>% distinct(ENTREZID, .keep_all = T)
keggdf <- merge(keggpathway.n, annot.se, by='UNIPROT')
keggdf <- keggdf[, c(3:5,2,1,6,7)]
keggdf <- keggdf %>% dplyr::arrange(hsa_id)
# data clean 2: to user friendly -----------
keggdf.symbol <- keggdf %>% dplyr::select(hsa_id, pathway_name, SYMBOL) %>%
rename(term = pathway_name, gene = SYMBOL) %>%
group_by(term, gene) %>%
distinct(.keep_all = T) %>%
na.omit()
keggdf.uniprot <- keggdf %>% dplyr::select(hsa_id, pathway_name, UNIPROT) %>%
rename(term = pathway_name, gene = UNIPROT) %>%
group_by(term, gene) %>%
distinct(.keep_all = T) %>%
na.omit()
keggdf.ensembl <- keggdf %>% dplyr::select(hsa_id, pathway_name, ENSEMBL) %>%
rename(term = pathway_name, gene = ENSEMBL) %>%
group_by(term, gene) %>%
distinct(.keep_all = T) %>%
na.omit()
original_data <- list(link=link, list=list, conv=conv)
return(list(keggdf = keggdf, original_data = original_data))
}
keggdb <- getKEGGdb()
getKEGGdb <- function() {
# aqurie data from online
tryCatch({
link <- read.table('https://rest.kegg.jp/link/hsa/pathway')
list <- read.table('https://rest.kegg.jp/list/pathway/hsa', sep = '\t')
conv <- read.table('https://rest.kegg.jp/conv/hsa/uniprot')
}, error = function(e) {
cat("网络不佳，请调整您的网络或使用代理工具\n")
cat("Error occurred: ", conditionMessage(e), "\n")
}, warning = function(w) {
cat("网络不佳，请调整您的网络或使用代理工具\n")
cat("Warning occurred: ", conditionMessage(w), "\n")
}, finally = {})
# data clean 1: original -----------
names(link) <- c("hsa_id", "gene_hsa_id")
names(list) <- c("hsa_id", "pathway_name_full")
names(conv) <- c("UNIPROT", "gene_hsa_id")
#
link[,1] <- sapply(strsplit(link[,1], ":"), function(x) x[[2]])
link[,2] <- sapply(strsplit(link[,2], ":"), function(x) x[[2]])
conv[,1] <- sapply(strsplit(conv[,1], ":"), function(x) x[[2]])
conv[,2] <- sapply(strsplit(conv[,2], ":"), function(x) x[[2]])
list$pathway_name <- gsub(
pattern = " - Homo sapiens \\(human\\)", "", list$pathway_name_full)
keggpathway <- merge(link, list, by = "hsa_id", all.x = T)
keggpathway.n <- merge(keggpathway, conv, by = "gene_hsa_id", all.x = T)
# 加上其它id
annot.se <- bitr(keggpathway.n$UNIPROT, fromType = 'UNIPROT',
toType = c('SYMBOL','ENSEMBL'),
OrgDb = 'org.Hs.eg.db') #%>% distinct(ENTREZID, .keep_all = T)
keggdf <- merge(keggpathway.n, annot.se, by='UNIPROT')
keggdf <- keggdf[, c(3:5,2,1,6,7)]
keggdf <- keggdf %>% dplyr::arrange(hsa_id)
# data clean 2: to user friendly -----------
keggdf.symbol <- keggdf %>% dplyr::select(hsa_id, pathway_name, SYMBOL) %>%
rename(term = pathway_name, gene = SYMBOL) %>%
group_by(term, gene) %>%
distinct(.keep_all = T) %>%
na.omit()
keggdf.uniprot <- keggdf %>% dplyr::select(hsa_id, pathway_name, UNIPROT) %>%
rename(term = pathway_name, gene = UNIPROT) %>%
group_by(term, gene) %>%
distinct(.keep_all = T) %>%
na.omit()
keggdf.ensembl <- keggdf %>% dplyr::select(hsa_id, pathway_name, ENSEMBL) %>%
rename(term = pathway_name, gene = ENSEMBL) %>%
group_by(term, gene) %>%
distinct(.keep_all = T) %>%
na.omit()
KEGGPATHWAYdb <- list(symbol = data.frame(keggdf.symbol),
ensembl = data.frame(keggdf.ensembl),
uniprot = data.frame(keggdf.uniprot))
KEGGPATHWAYgmt <- lapply(KEGGPATHWAYdb, function(x) x[,2:3])
#  list(symbol = data.frame(keggdf.symbol[,2:3]),
#                       ensembl = data.frame(keggdf.ensembl[,2:3]),
#                       uniprot = data.frame(keggdf.uniprot[,2:3]))
original_data <- list(link=link, list=list, conv=conv)
return(list(keggdf.all = keggdf,
KEGGPATHWAYdb = KEGGPATHWAYdb,
KEGGPATHWAYgmt = KEGGPATHWAYgmt,
original_data = original_data))
}
keggdb <- getKEGGdb()
keggdf.all <- keggdb$keggdf.all
View(keggdf.all)
KEGGPATHWAYdb <- list(symbol = data.frame(keggdf.symbol),
ensembl = data.frame(keggdf.ensembl),
uniprot = data.frame(keggdf.uniprot))
View(KEGGPATHWAYdb)
KEGGPATHWAYgmt <- lapply(KEGGPATHWAYdb, function(x) x[,2:3])
keggdb$KEGGPATHWAYgmt$symbol %>% head
keggdf.w <- lapply(keggdb$KEGGPATHWAYdb, pathway_longTOwide)
#####
pathway_longTOwide <- function(keggdf) {
keggdftt <- reshape2::dcast(keggdf, hsa_id+term~gene)
xn <- names(keggdftt)[3:ncol(keggdftt)]
keggdftt$GENE <- apply(keggdftt[, 3:ncol(keggdftt)], 1, function(x) {
xn[x>0] %>% sort() %>% paste(., collapse=',')
})
keggdf.new <- keggdftt %>% dplyr::select(hsa_id, term, GENE)
return(keggdf.new)
}
keggdf.w <- lapply(keggdb$KEGGPATHWAYdb, pathway_longTOwide)
View(keggdf.w)
View(keggdf.w[["symbol"]])
View(keggdf.w[["ensembl"]])
#####
pathway_longTOwide <- function(keggdf) {
keggdftt <- reshape2::dcast(keggdf, hsa_id+term~gene)
xn <- names(keggdftt)[3:ncol(keggdftt)]
keggdftt$GENE <- apply(keggdftt[, 3:ncol(keggdftt)], 1, function(x) {
xn[x>0] %>% sort() %>% paste(., collapse=', ')
})
keggdf.new <- keggdftt %>% dplyr::select(hsa_id, term, GENE)
return(keggdf.new)
}
keggdf.w <- lapply(keggdb$KEGGPATHWAYdb, pathway_longTOwide)
View(KEGGPATHWAYdb[["symbol"]])
keggdf.w <- lapply(keggdb$KEGGPATHWAYdb, pathway_longTOwide)
View(keggdf.w)
View(keggdf.w[["symbol"]])
View(keggdf.w)
writexl::write_xlsx(keggdf.w,
path = "./KEGG_Pathway_W.xlsx")
writexl::write_xlsx(keggdb$KEGGPATHWAYdb,
path = "./KEGG_Pathway_L.xlsx")
writexl::write_xlsx(keggdb$keggdf.all,
path = "./KEGG_Pathway_ALL.xlsx")
#####
library(clusterProfiler)
library(org.Hs.eg.db)
library(dplyr)
LZ::setproxy()
getKEGGdb <- function() {
# aqurie data from online
tryCatch({
link <- read.table('https://rest.kegg.jp/link/hsa/pathway')
list <- read.table('https://rest.kegg.jp/list/pathway/hsa', sep = '\t')
conv <- read.table('https://rest.kegg.jp/conv/hsa/uniprot')
}, error = function(e) {
cat("网络不佳，请调整您的网络或使用代理工具\n")
cat("Error occurred: ", conditionMessage(e), "\n")
}, warning = function(w) {
cat("网络不佳，请调整您的网络或使用代理工具\n")
cat("Warning occurred: ", conditionMessage(w), "\n")
}, finally = {})
# data clean 1: original -----------
names(link) <- c("hsa_id", "gene_hsa_id")
names(list) <- c("hsa_id", "pathway_name_full")
names(conv) <- c("UNIPROT", "gene_hsa_id")
#
link[,1] <- sapply(strsplit(link[,1], ":"), function(x) x[[2]])
link[,2] <- sapply(strsplit(link[,2], ":"), function(x) x[[2]])
conv[,1] <- sapply(strsplit(conv[,1], ":"), function(x) x[[2]])
conv[,2] <- sapply(strsplit(conv[,2], ":"), function(x) x[[2]])
list$pathway_name <- gsub(
pattern = " - Homo sapiens \\(human\\)", "", list$pathway_name_full)
keggpathway <- merge(link, list, by = "hsa_id", all.x = T)
keggpathway.n <- merge(keggpathway, conv, by = "gene_hsa_id", all.x = T)
# 加上其它id
annot.se <- bitr(keggpathway.n$UNIPROT, fromType = 'UNIPROT',
toType = c('SYMBOL','ENSEMBL'),
OrgDb = 'org.Hs.eg.db') #%>% distinct(ENTREZID, .keep_all = T)
keggdf <- merge(keggpathway.n, annot.se, by='UNIPROT')
keggdf <- keggdf[, c(3:5,2,1,6,7)]
keggdf <- keggdf %>% dplyr::arrange(hsa_id)
# data clean 2: to user friendly -----------
keggdf.symbol <- keggdf %>% dplyr::select(hsa_id, pathway_name, SYMBOL) %>%
rename(term = pathway_name, gene = SYMBOL) %>%
group_by(term, gene) %>%
distinct(.keep_all = T) %>%
na.omit()
keggdf.uniprot <- keggdf %>% dplyr::select(hsa_id, pathway_name, UNIPROT) %>%
rename(term = pathway_name, gene = UNIPROT) %>%
group_by(term, gene) %>%
distinct(.keep_all = T) %>%
na.omit()
keggdf.ensembl <- keggdf %>% dplyr::select(hsa_id, pathway_name, ENSEMBL) %>%
rename(term = pathway_name, gene = ENSEMBL) %>%
group_by(term, gene) %>%
distinct(.keep_all = T) %>%
na.omit()
KEGGPATHWAYdb <- list(symbol = data.frame(keggdf.symbol),
ensembl = data.frame(keggdf.ensembl),
uniprot = data.frame(keggdf.uniprot))
KEGGPATHWAYgmt <- lapply(KEGGPATHWAYdb, function(x) x[,2:3])
#  list(symbol = data.frame(keggdf.symbol[,2:3]),
#                       ensembl = data.frame(keggdf.ensembl[,2:3]),
#                       uniprot = data.frame(keggdf.uniprot[,2:3]))
original_data <- list(link=link, list=list, conv=conv)
return(list(keggdf.all = keggdf,
KEGGPATHWAYdb = KEGGPATHWAYdb,
KEGGPATHWAYgmt = KEGGPATHWAYgmt,
original_data = original_data))
}
keggdb <- getKEGGdb()
keggdf.all <- keggdb$keggdf.all
#####
pathway_longTOwide <- function(keggdf) {
keggdftt <- reshape2::dcast(keggdf, hsa_id+term~gene)
xn <- names(keggdftt)[3:ncol(keggdftt)]
keggdftt$GENE <- apply(keggdftt[, 3:ncol(keggdftt)], 1, function(x) {
xn[x>0] %>% sort() %>% paste(., collapse=', ')
})
keggdf.new <- keggdftt %>% dplyr::select(hsa_id, term, GENE)
return(keggdf.new)
}
keggdf.w <- lapply(keggdb$KEGGPATHWAYdb, pathway_longTOwide)
# ------------------
KEGGPATHWAYgmt <- keggdb$KEGGPATHWAYgmt
View(KEGGPATHWAYgmt)
# 为了兼容前版本
KEGGPATHWAYdb <- KEGGPATHWAYgmt$symbol
save(KEGGPATHWAYdb, file = "./KEGGPATHWAYdb.RData", compress = "xz")
save(KEGGPATHWAYdb, file = "./KEGGPATHWAYdb.RData")
load("data/KEGGPATHWAYdb.RData")
#####
library(clusterProfiler)
library(org.Hs.eg.db)
library(dplyr)
LZ::setproxy()
getKEGGdb <- function() {
# aqurie data from online
tryCatch({
link <- read.table('https://rest.kegg.jp/link/hsa/pathway')
list <- read.table('https://rest.kegg.jp/list/pathway/hsa', sep = '\t')
conv <- read.table('https://rest.kegg.jp/conv/hsa/uniprot')
}, error = function(e) {
cat("网络不佳，请调整您的网络或使用代理工具\n")
cat("Error occurred: ", conditionMessage(e), "\n")
}, warning = function(w) {
cat("网络不佳，请调整您的网络或使用代理工具\n")
cat("Warning occurred: ", conditionMessage(w), "\n")
}, finally = {})
# data clean 1: original -----------
names(link) <- c("hsa_id", "gene_hsa_id")
names(list) <- c("hsa_id", "pathway_name_full")
names(conv) <- c("UNIPROT", "gene_hsa_id")
#
link[,1] <- sapply(strsplit(link[,1], ":"), function(x) x[[2]])
link[,2] <- sapply(strsplit(link[,2], ":"), function(x) x[[2]])
conv[,1] <- sapply(strsplit(conv[,1], ":"), function(x) x[[2]])
conv[,2] <- sapply(strsplit(conv[,2], ":"), function(x) x[[2]])
list$pathway_name <- gsub(
pattern = " - Homo sapiens \\(human\\)", "", list$pathway_name_full)
keggpathway <- merge(link, list, by = "hsa_id", all.x = T)
keggpathway.n <- merge(keggpathway, conv, by = "gene_hsa_id", all.x = T)
# 加上其它id
annot.se <- bitr(keggpathway.n$UNIPROT, fromType = 'UNIPROT',
toType = c('SYMBOL','ENSEMBL'),
OrgDb = 'org.Hs.eg.db') #%>% distinct(ENTREZID, .keep_all = T)
keggdf <- merge(keggpathway.n, annot.se, by='UNIPROT')
keggdf <- keggdf[, c(3:5,2,1,6,7)]
keggdf <- keggdf %>% dplyr::arrange(hsa_id)
# data clean 2: to user friendly -----------
keggdf.symbol <- keggdf %>% dplyr::select(hsa_id, pathway_name, SYMBOL) %>%
rename(term = pathway_name, gene = SYMBOL) %>%
group_by(term, gene) %>%
distinct(.keep_all = T) %>%
na.omit()
keggdf.uniprot <- keggdf %>% dplyr::select(hsa_id, pathway_name, UNIPROT) %>%
rename(term = pathway_name, gene = UNIPROT) %>%
group_by(term, gene) %>%
distinct(.keep_all = T) %>%
na.omit()
keggdf.ensembl <- keggdf %>% dplyr::select(hsa_id, pathway_name, ENSEMBL) %>%
rename(term = pathway_name, gene = ENSEMBL) %>%
group_by(term, gene) %>%
distinct(.keep_all = T) %>%
na.omit()
KEGGPATHWAYdb <- list(symbol = data.frame(keggdf.symbol),
ensembl = data.frame(keggdf.ensembl),
uniprot = data.frame(keggdf.uniprot))
KEGGPATHWAYgmt <- lapply(KEGGPATHWAYdb, function(x) x[,2:3])
#  list(symbol = data.frame(keggdf.symbol[,2:3]),
#                       ensembl = data.frame(keggdf.ensembl[,2:3]),
#                       uniprot = data.frame(keggdf.uniprot[,2:3]))
original_data <- list(link=link, list=list, conv=conv)
return(list(keggdf.all = keggdf,
KEGGPATHWAYdb = KEGGPATHWAYdb,
KEGGPATHWAYgmt = KEGGPATHWAYgmt,
original_data = original_data))
}
keggdb <- getKEGGdb()
keggdf.all <- keggdb$keggdf.all
# 为了兼容前版本
KEGGPATHWAYdb <- KEGGPATHWAYgmt
# ------------------
KEGGPATHWAYgmt <- keggdb$KEGGPATHWAYgmt
# 为了兼容前版本
KEGGPATHWAYdb <- KEGGPATHWAYgmt
save(KEGGPATHWAYdb, file = "./KEGGPATHWAYdb.RData", compress = "xz")
save(KEGGPATHWAYdb, file = "./data/KEGGPATHWAYdb.RData", compress = "xz")
load("data/KEGGPATHWAYdb.RData")
View(KEGGPATHWAYdb)
load("data/gencode.v22.annot.RData")
save(gencode.v22.annot, file = "data/gencode.v22.annot.RData", compress = "xz")
load("data/gmt.largelist.23.12.Hs.symbols.RData")
save(gmt.largelist.23.12.Hs.symbols,
file = "data/gmt.largelist.23.12.Hs.symbols.RData",
compress = "xz")
load("data/keggpathway.gmt.RData")
# 总结(极简: document() + build)
# 1. devtools::load_all()
# 2. 1. devtools::document()
#    2. vim DESCRIPTION(usethis::函数或手动)
# 3. devtools::check() / devtools::build()
# LDCB流程
file.remove("NAMESPACE")
unlink("man", recursive = T)
devtools::load_all()
devtools::document() # usethis::use_package("stats", type = "Depends")
devtools::check() # 每次改动后最好都check一下
# 总结(极简: document() + build)
# 1. devtools::load_all()
# 2. 1. devtools::document()
#    2. vim DESCRIPTION(usethis::函数或手动)
# 3. devtools::check() / devtools::build()
# LDCB流程
file.remove("NAMESPACE")
unlink("man", recursive = T)
devtools::load_all()
devtools::document() # usethis::use_package("stats", type = "Depends")
devtools::check() # 每次改动后最好都check一下
# devtools::clean_vignettes()
# devtools::build_vignettes()
# .\Rcmd.exe build --resave-data D:\IMPORTANT\LZ
devtools::build()
library(NEWLZ, lib.loc = "D:/Users/ProgramFiles/R-4.3.2/library")
remove.packages("NEWLZ", lib="D:/Users/ProgramFiles/R-4.3.2/library")
devtools::install_github("ArronLZ/LZ", upgrade = "never", build_vignettes = F,
force = T)
# 总结(极简: document() + build)
# 1. devtools::load_all()
# 2. 1. devtools::document()
#    2. vim DESCRIPTION(usethis::函数或手动)
# 3. devtools::check() / devtools::build()
# LDCB流程
file.remove("NAMESPACE")
unlink("man", recursive = T)
devtools::load_all()
devtools::document() # usethis::use_package("stats", type = "Depends")
devtools::check() # 每次改动后最好都check一下
# devtools::clean_vignettes()
# devtools::build_vignettes()
# .\Rcmd.exe build --resave-data D:\IMPORTANT\LZ
devtools::build()
